<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="admin.persistence.adminMapper">

	<!-- 조건마다 다르게 검색하기 조각 sql -->
	<sql id="whereClause">
		<if test="selectBox != null and searchInput != ''"><!-- if는 mybatis에서 지원한다 -->
			<where><!-- if를 통과하면 where절(sql의)을 삽입한다 -->
				<choose><!-- switch와 비슷 -->
					<!-- 컨텐츠리스트에서 검색했을때 -->
					<when test="selectBox=='idx'">
						idx like upper('%'||#{searchInput}||'%')
					</when>
					<when test="selectBox=='email'">
						email like '%'||#{searchInput}||'%'
					</when>
					<when test="selectBox=='name'">
						name like '%'||#{searchInput}||'%'
					</when>
					<when test="selectBox=='stateStr'">
						stateStr like '%'||#{searchInput}||'%'
					</when>
					<when test="selectBox=='title'">
						title like '%'||#{searchInput}||'%'
					</when>
  					<otherwise><!-- 디폴트로 넣어줄 셀렉트값 -->
						name like '%'||#{searchInput}||'%'						
					</otherwise>
				</choose>
			</where>
		</if>
	</sql>

	<!-- /조각sql=============================== -->
	
	<!-- MEMBER======================================== -->
	<!-- 전체 회원수(페이징) -->
	<select id="totalMember" resultType="int">
		select count(email) from member_view
	</select>
	<!-- 검색한 회원수(페이징) -->
	<select id="totalSearchMember" resultType="int" parameterType="Map">
		select count(email) from member_view
		<include refid="whereClause"/>
	</select>
	
	<!-- 멤버리스트 보여주기 -->
	<select id="listMember" resultType="Member" parameterType="Map">
		select * from (
		select rownum rn, member.* from
		(select *
		  from member_view order by email) member)
		where rn between #{start} and #{end}
	</select>
	<!-- 회원 한명의 정보 보여주기 -->
	<select id="listOneMember" resultType="Member" parameterType="string">
		select * from member_view where email=#{email}
	</select>
	<!-- 검색한 멤버만 보여주기 -->
	<select id="searchMember" resultType="Member" parameterType="Map">
		select * from(
		select rownum rn, member.* from
		(select * from member_view
		<include refid="whereClause"/> order by email) member)
		where rn between #{start} and #{end}
		<!-- select email, name, pwd, age, point, state from member
		<include refid="whereClause"/>
		order by email -->
	</select>
	<!-- 회원정보 수정하기 -->
	<update id="updateMember" parameterType="Member">
		update member set name=#{name}, point=#{point}, state=#{state} where email=#{email}
	</update>
	<!-- //MEMBER end======================================== -->
	
	<!-- TRAILER ================================================ -->
	<!-- 총 컨텐츠 수 -->
	<select id="totalTrailer" resultType="int">
		select count(idx) from trailer_view
	</select>
	<!-- 검색한 컨텐츠 수 -->
	<select id="totalSearchTrailer" resultType="int" parameterType="Map">
		select count(idx) from trailer_view
		<include refid="whereClause"/>
	</select>
	
	<!-- 컨텐츠리스트 보여주기 -->
 	<select id="listTrailer" resultType="Trailer" parameterType="Map">
		select * from (
		select rownum rn, trailer.* from
		(select idx,api_idx,url,title,good,click,zzim,email from trailer_view order by idx) trailer)
		where rn between #{start} and #{end}
	</select>
	<!-- 검색한 컨텐츠만 보여주기 -->
	<select id="searchTrailer" resultType="Trailer" parameterType="Map">
		select * from (
		select rownum rn, trailer.* from
		(select * from trailer_view
		<include refid="whereClause"/> order by idx) trailer)
		where rn between #{start} and #{end}
	</select>
	
	<!-- 특정 컨텐츠만 보여주기 (수정할때) -->
	<select id="selectOneTrailer" resultType="Trailer" parameterType="string">
		select * from trailer where idx=#{idx}
	</select>
	
	<!-- 컨텐츠 수정 -->
	<update id="updateTrailer" parameterType="Trailer">
		update trailer_view set title=#{title}, director=#{director},
		 info=#{info}, release=#{release}
		 where idx=#{idx}
	</update>
	
	<!-- //TRAILER end================================================ -->

	<!-- MEMBERCONTENT ================================================ -->
	<!-- 총 멤버컨텐츠 수-->
	<select id="totalMemberAllContent" resultType="int">
		select count(idx) from memberAllReview_view
	</select>
	<!-- 검색한 멤버컨텐츠 수 -->
	<select id="totalSearchMemberContent" resultType="int" parameterType="Map">
		select count(idx) from memberAllReview_view
		<include refid="whereClause"/>
	</select>
	<!-- 특정 멤버의 총 컨텐츠 수 -->
	<select id="totalMemberContent" resultType="int" parameterType="String">
		select count(idx) from memberAllReview_view where email=#{email}
	</select>
	
	<!-- 모든 멤버컨텐츠리스트 보여주기 -->
 	<select id="listAllMemberContent" resultType="admin.domain.MemberContentVO" parameterType="Map">
		select * from (
		select rownum rn, memberContent.* from
		(select * from memberAllReview_view order by idx) memberContent)
		where rn between #{start} and #{end}
	</select>
	<!-- 검색한 유저의 컨텐츠리스트 보여주기 -->
	<select id="searchMemberContent" resultType="admin.domain.MemberContentVO" parameterType="Map">
		select * from (
		select rownum rn, mContent.* from
		(select * from memberAllReview_view
		<include refid="whereClause"/> order by idx) mContent)
		where rn between #{start} and #{end}
	</select>
	<!-- 특정유저의 컨텐츠리스트 보여주기 -->
	<select id="listMemberContent" resultType="admin.domain.MemberContentVO" parameterType="Map">
		select * from (
		select rownum rn, mContent.* from
		(select * from memberAllReview_view
		where email=#{email} order by idx) mContent)
		where rn between #{start} and #{end}
	</select>
	<!-- 멤버 삭제 -->
	<delete id="deleteMember" parameterType="string">
		delete from member where email=#{email}
	</delete>
	
	<!-- //MEMBERCONTENT end ================================================ -->
	
	<!-- NOTICE =========================================================== -->
	
	<!-- 총 공지사항 개수(페이징) -->
	<select id="totalNotice" resultType="int">
		select count(idx) from notice
	</select>
	<!-- 검색한 공지사항 개수(페이징) -->
	<select id="totalSearchNotice" resultType="int" parameterType="Map">
		select count(idx) from notice
		<include refid="whereClause"/>
	</select>
	<!-- 공지사항 보여주기(페이징) -->
 	<select id="getNoticeList" resultType="Notice">
		select * from (select rownum rn, notice.* from 
		 (select idx,title,info,wdate,click,name from notice order by idx desc) notice)
		  where rn between #{start} and #{end}
	</select>
	<!-- 검색한 공지사항 보여주기 -->
	<select id="selectNotice" resultType="Notice" parameterType="Map">
		select * from (
		select rownum rn, notice.* from
		(select * from notice
		<include refid="whereClause"/> order by idx desc) notice)
		where rn between #{start} and #{end}
	</select>
	<!-- 공지사항 한개 가져오기 idx로-->
	<select id="selectOneNotice" resultType="Notice" parameterType="string">
		select idx,title,info,wdate,click,name from notice where idx=#{idx}
	</select>
	<!-- 공지사항 조회시 조회수 증가 -->
	<update id="updateClick" parameterType="string">
		update notice set click=(click+1) where idx=#{value}
	</update>
	<!-- 공지사항 등록 -->
	<insert id="insertNotice" parameterType="Notice">
		<!-- 시퀀스 selectKey -->
		<selectKey keyProperty="idx" order="BEFORE" resultType="int">
			select notice_seq.nextval from dual
		</selectKey>
		insert into notice values(#{idx},#{title},#{info},sysdate,0,#{name})
	</insert>
	<!-- 공지사항 수정 -->
	<update id="updateNotice" parameterType="Notice">
		update notice set title=#{title}, info=#{info}, wdate=sysdate where idx=#{idx}
	</update>
	<!-- 공지사항 삭제 -->
	<delete id="deleteNotice" parameterType="string">
		delete from notice where idx=#{idx}
	</delete>

</mapper>